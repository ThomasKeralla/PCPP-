{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c0\c0\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs22 \cf2 \cb3 \CocoaLigature0 Parallel Programming - Hand-in 2
\f1\b0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f2\b\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 Exercise 2.1.1
\f1\b0\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
$ time java TestCountPrimes\
Sequential result:     664579\
\
\
real	0m6.597s\
user	0m6.585s\
sys	0m0.061s\
\
\pard\pardeftab720\sl280\partightenfactor0

\f2\b\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 Exercise 2.1.1
\f1\b0\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
$ time java TestCountPrimes\
Parallel10 result:     664579\
\
\
real	0m3.351s\
user	0m11.856s\
sys	0m0.078s\
\
\pard\pardeftab720\sl280\partightenfactor0

\f2\b\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 Exercise 2.1.3
\f1\b0\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
$ time java TestCountPrimes\
Parallel2  result:     663511\
\
No it does not produce the correct result.\
\
\pard\pardeftab720\sl280\partightenfactor0

\f2\b\fs24 \cf4 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 Exercise 2.1.4
\b0 \
No it does not matter in this case as it is only used in a non multithreaded environment, that it, it is only \
used after the join(), meaning all threads are done. But should you refactor and use the variable inside a thread it \
would matter a lot. \
\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\b\fs26\fsmilli13333 \cf4 Exercise 2.2 .1
\b0 \
I do not understand the exercise as the code is already available in the source code in BasicDesign the has been given. \
real 0m7 .344s\
user 0m6 .966s\
sys 0m0 . 043s\

\b Exercise 2.2 .2
\b0 \
Done. See TestCountFactors(done).java\

\b Exercise 2.2 .3
\b0 \
Yes I do get the same and right result 
\fs24 \cf4 \outl0\strokewidth0 \strokec4 18,703,729. Time is:\
real 0m3. 794s\
user 0m13. 495s\
sys 0m0. 055s\

\b\fs26\fsmilli13333 \cf4 \outl0\strokewidth0 Exercise 2.2 .4
\b0 \
No Volatile gives you visibility not thread safety.  \

\b Exercise 2.2 .5\

\b0 Same result, but faster by almost 400ns in real time.\
Java\'92s own AtomicInteger implements addAndGet() by declaring it final. This means that the addAndGet() is immutable and is automatically thread safe.\

\b Exercise 2.3 .1\

\b0\fs24 For a cache to be efficient all threads has to be able to read from it in a concurrent way. Volatile offers this visibility as there is no locking. \

\b\fs26\fsmilli13333 Exercise 2.3 .2
\b0\fs24 \
As the cache is a immutable object where the variables on has to be set once, at initialisation, final can be used instead of synchronisation. Threads will continue their work instead of waiting for a lock, that way lock contention is eliminated.   \

\b\fs26\fsmilli13333 Exercise 2.4..1\

\b0 I have chosen to declare the int[] counts field final as it will never change, thus being immutable. that way the getSpan() method does not need to be synchronised. I have chosen to synchronise the other two methods so that they share a lock on the same object, thus making it thread safe. \

\b Exercise 2.4.2\

\b0 Done. See TestCountFactorsDone.java \
 
\b Exercise 2.4.3
\b0\fs24 \
Yes, I can remove synchronised from all methods because the increment is atomic and has its own lock.\

\fs26\fsmilli13333  
\b Exercise 2.4..4\

\b0 Done. See SimpleHistogramDone.java\
 
\b Exercise 2.4..5
\b0\fs24 \
Histogram2:\
Im using the same lock on getBins() as we use on increment() which means that we get a fixed data snapshot.\
\
Histogram3:\
A new integer array is generated in the getBins() method and then a for loop is used to get each value of the bins. This means that we get a live view of the bins that can be affected by the increment() method. Therefore I have locked the increment and getBins methods to the same object to make sure that a snapshot is given. \
\
Histogram4:\
We use same approach as with Histogram3. We generate a new integer array in the getBins() method and then uses a for loop to get each value of the bins. This means that we get a live view of the bins that can be affected by the increment() method. Same as in synchronisation with a shared lock between the methods. \

\fs26\fsmilli13333  
\b Exercise 2.4..6\

\b0\fs24 Done. See SimpleHistogramDone.java\

\b\fs26\fsmilli13333 Exercise 2.5.1\

\b0 Done. See TestCahe.java\

\b Exercise 2.5.2\

\b0 Yes the factoriser is called 115000 times. Time:\
real 0m1. 416s\
user 0m2. 220s\
sys 0m0. 259s\

\b Exercise 2.5.3\

\b0 factoriser is called 156317 times. Time:
\fs24 \

\fs26\fsmilli13333 real 0m1. 438s\
user 0m4. 323s\
sys 0m0. 133s\
Memoizer2 implements a ConcurrentHashMap which is better optimised then the regular HashMap in Memoizer1 making the synchronisation unnecessary. However as all threads can compute() at the same time it is only cache.put() operation that is locked, and when threads try to put values in the cache (ConcurrentHashMap) at the same time, one or more threads are blocked. This explains the increase in call in Memoizer2 and why it is slightly slower even though the compute() method can be accessed without a lock.\

\b Exercise 2.5.4\

\b0 factoriser is called 117297 times. Time:
\fs24 \

\fs26\fsmilli13333 real 0m1. 344s\
user 0m2. 531s\
sys 0m0. 436s\
This class optimise by using a ConcurrentHashMap and a Future to cache immediately, hence the better performance in terms of time.\

\b Exercise 2.5.5\

\b0 factoriser is called 115000 times. Time:
\fs24 \

\fs26\fsmilli13333 real 0m1. 265s\
user 0m2. 721s\
sys 0m0. 412s\
The better performance comes from light weight evaluations (if statements) that avoids redundant computations, hence also why it only call 115000 times. \

\b Exercise 2.5.6
\b0 \
factoriser is called 115000 times. Time:
\fs24 \

\fs26\fsmilli13333 real 0m1. 168s\
user 0m2. 595s\
sys 0m0. 461s\
Optimisation of cache by first checking the cache atomically, if not there use the Future to add it to cache, then finally run on calling thread.\

\b Exercise 2.5.7\

\b0 factoriser is called 115000 times. Time:
\fs24 \

\fs26\fsmilli13333 real 0m1. 237s\
user 0m3. 591s\
sys 0m0. 116s\

\b Exercise 2.6.1\

\b0 Results:\
main finished 40000000\
fresh 0 stops: 29572939\
fresh 1 stops: 29582855
\b \

\b0 The two threads produces different results than expected.
\b \
\
2.6.2\

\b0 The threads do not synchronize on the static variable, count, because they are using an instance lock on the object. The solution is to synchronize on the class instead (Long.class).\

\b \
2.6.3\

\b0 Done. See TestStaticCounter.java}